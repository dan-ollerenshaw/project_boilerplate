# We use tox for a few reasons.
#
# It makes it very simple to get up and running with an unfamiliar repo.
# You just run `tox`, or `tox -e <envname>` and boom, you're set.
#
# Tox sorts out virtualenvs for us. If someone freshly clones the repo, but they don't have the
# dependencies installed, they can still just run the tox commands no problem, tox will take of the dependencies.
#
# It also allows us to test against different versions of python, if that's something we want.
#
# The only downside is it can be a bit slow, so if this is a problem, you can set up your own virtualenv
# e.g. for running from source nice and quickly.



# TODO: consolidate into a single env to speed things up

[tox]
# skipsdist tells tox we're not testing an actual Python package (no setup.py)
skipsdist=True
# envlist is the default that gets run if you run `tox` without specifying any environments
envlist =
    lint,
    run_tests


[paths]
# setup some variables for use elsewhere, so we don't have to repeat ourselves
root = {toxinidir}
src = {toxinidir}/src
tests = {toxinidir}/tests
docs = {toxinidir}/docs
dist = {toxinidir}/dist

[testenv]
# here we just install from PyPI, but this could be modified to install from a private mirror, or equivalent
install_command = pip install {opts} {packages}


# TODO: we're repeating the -r requirements.txt installation a few times here
[testenv:lint]
deps =
    -r requirements.txt
    pylint
commands =
    pylint {[paths]src}

[testenv:run_tests]
deps =
    -r requirements.txt
    pytest
commands =
    pytest {[paths]tests}


[testenv:run]
description = "Run the program from source."
deps =
    -r requirements.txt
commands =
    # invoking this is a bit confusing.
    # my program has an optional argument --input_filepath
    # if we don't want to supply a value for this, we just invoke like this:
    # tox -e run
    # if we do want to supply a value (e.g. x), we invoke like this:
    # tox -e run -- --input_filepath x
    # https://tox.readthedocs.io/en/latest/example/general.html - interactively passing positional arguments
    python -m src.main {posargs}


[testenv:docs]
description= Build documentation using sphinx (autodoc)
deps =
    -r requirements.txt
    sphinx
# ??
skip_install = false
commands =
    # copied from 43 for now, might need tweaking
    # the "reference" folder is created manually, I think


    # generate the autodocs for modules
    sphinx-apidoc --separate --module-first --force --no-toc {[paths]src} -o {[paths]docs}/reference
    # build html documentation
    sphinx-build {posargs:-E} -b html {[paths]docs} {[paths]dist}/docs
    # check any links
    sphinx-build -b linkcheck {[paths]docs} {[paths]dist}/docs